---
import Layout from '../layouts/Layout.astro';
---

<Layout title="ElevenLabs Conversational AI">
	<div id="conversationOverlay" class="overlay hidden">

		<img src="/images/logo.svg" alt="ElevenLabs" class="overlay-logo" />
	</div>
	<main>
		<div class="hero">
			<img src="/images/elevenlabs-logo-white.svg" alt="ElevenLabs" class="hero-logo" />
			<h1>Conversational AI</h1>
		</div>
		<div class="container">
		<div class="controls">
			<button id="startButton" class="button primary">Start Conversation</button>
		</div>
			<div class="status-badges">
				<span id="connectionStatus" class="badge disconnected">Disconnected</span>
			</div>
		</div>
	</main>

	<style>


		@keyframes rotate {
			0% {
				transform: rotate(0deg);
			}
			100% {
				transform: rotate(360deg);
			}
		}

		.overlay {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: rgba(0, 0, 0, 0.85);
			display: flex;
			align-items: center;
			justify-content: center;
			z-index: 1000;
			opacity: 0;
			visibility: hidden;
			transition: opacity 0.3s ease, visibility 0.3s ease;
		}

		.overlay.visible {
			opacity: 1;
			visibility: visible;
		}

		.overlay.hidden {
			opacity: 0;
			visibility: hidden;
		}

		.overlay-logo {
			width: 200px;
			height: auto;
			transition: transform 0.3s ease;
		}

		@keyframes pulse {
			0% { transform: scale(1); }
			20% { transform: scale(1.15); }
			40% { transform: scale(1); }
			60% { transform: scale(1.2); }
			80% { transform: scale(1.1); }
			100% { transform: scale(1); }
		}

		.overlay-logo.speaking {
			animation: pulse 1.5s ease-in-out infinite;
		}



		.overlay-logo.idle {
			animation: rotate 20s linear infinite;
			transition: all 0.5s ease-out;
		}

		.hero {
			padding: 4rem 2rem;
			text-align: center;
			margin-bottom: 3rem;
		}

		.hero-logo {
			max-width: 300px;
			width: 100%;
			height: auto;
			margin-bottom: 2rem;
		}

		.container {
			max-width: 600px;
			width: 100%;
			text-align: center;
		}

		h1 {
			font-size: 3rem;
			font-weight: 100;
			margin-bottom: 2rem;
			color: var(--text);
		}

		.controls {
			display: flex;
			gap: 1rem;
			justify-content: center;
			margin-bottom: 2rem;
		}

		.button {
			padding: 0.75rem 1.5rem;
			border-radius: 8px;
			border: none;
			font-weight: 500;
			cursor: pointer;
			transition: all 0.2s ease;
		}

		.button:disabled {
			opacity: 0.5;
			cursor: not-allowed;
		}

		.button.primary {
			background-color: #00ffff;
			color: black;
		}

		.button.primary:hover:not(:disabled) {
			background-color: #00cccc;
		}

		.button.secondary {
			background-color: var(--secondary);
			color: var(--text);
		}

		.button.secondary:hover:not(:disabled) {
			background-color: color-mix(in srgb, var(--secondary) 80%, white);
		}

		.status {
			font-size: 1.125rem;
			display: flex;
			flex-direction: column;
			gap: 0.5rem;
		}

		.badge {
			display: inline-block;
			padding: 0.25rem 0.75rem;
			border-radius: 9999px;
			font-weight: 500;
			font-size: 0.875rem;
			margin-left: 0.5rem;
		}

		.badge.disconnected {
			background-color: var(--error);
			color: white;
		}
		.badge.connected {
			background-color: var(--success);
			color: white;
		}



	</style>
</Layout>

<script>
	console.log('%cðŸŽ¤ ElevenLabs Demo Initializing...', 'color: #4CAF50; font-size: 20px; font-weight: bold;');

	import { setupConversation } from '../utils/conversation';

	const startButton = document.getElementById('startButton') as HTMLButtonElement;
	const connectionStatus = document.getElementById('connectionStatus') as HTMLSpanElement;
	const overlay = document.getElementById('conversationOverlay') as HTMLDivElement;
	const overlayLogo = overlay?.querySelector('.overlay-logo') as HTMLDivElement;

	if (!startButton || !connectionStatus || !overlay || !overlayLogo) {
		console.error('Required DOM elements not found');
		throw new Error('Required DOM elements not found');
	}

	// Initialize conversation handlers
	setupConversation(startButton, overlayLogo, connectionStatus, {
		onConnect: ({ conversationId }) => {
			console.log('Connected with conversation ID:', conversationId);
			overlay.classList.remove('hidden');
			overlay.classList.add('visible');
		},
		onDisconnect: () => {
			console.log('Disconnected');
			overlay.classList.remove('visible');
			overlay.classList.add('hidden');
		},
		onError: (message, context) => {
			console.error('Error:', message, context);
		},
		onModeChange: ({ mode }) => {
			console.log('Mode changed:', mode);
		}
	});
</script>


